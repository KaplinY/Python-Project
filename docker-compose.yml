version: '3.7'

services:
  app: &app
    # Name of the resulting image after build.
    image: puzzles:latest
    # The way we build image.
    build:
      context: .
      dockerfile: Dockerfile
    # Here we define dependencies for
    # our service. We assume that without them
    # our service won't start.
    depends_on:
      db-migrator:
        condition: service_completed_successfully
      database:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    ports:
      - 8000-8002:8000
    environment:
      DB_DSN: postgresql+asyncpg://percents:percents@database:5432/percents
      MQ_DSN: amqp://guest:guest@rabbitmq:5672/
      SERVER_HOST: 85.10.195.40
      SERVER_PORT: 30025 
      
  db-migrator:
    <<: *app
    command: [alembic, upgrade, head]
    ports: []
    depends_on:
      database:
        condition: service_healthy
        
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: 'rabbitmq'
    ports:
        - 5672:5672
        - 15672:15672
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3

  broker:
    <<: *app
    command: [taskiq, worker, project1.tkq:broker, -fsd]
    ports: []

  database:
    image: postgres:13.8-bullseye
    # volume is here to persist data
    # between runs. By default no data is kept on shutdown.
    volumes:
      - db-data:/var/lib/postgresql/data
    # With environments we control database initialization
    environment:
      POSTGRES_DB: percents
      POSTGRES_USER: percents
      POSTGRES_PASSWORD: percents
    restart: always
    # Healthcheck constantly cheks whether database is up.
    healthcheck:
      test: pg_isready -U percents
      interval: 2s
      timeout: 3s
      retries: 40
    # Here we have exposed ports to host system.
    ports:
      - 5432:5432

# Named volumes.
volumes:
  db-data:

